"""\nDatabase Models for Personal Finance AI Assistant\nAuthor: Kankala Nandu\nDescription: SQLAlchemy ORM models for users, transactions, budgets, and financial goals\n"""\n\nfrom datetime import datetime\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\n\nclass User(UserMixin, db.Model):\n    \"\"\"User model for authentication and profile management\"\"\"\n    __tablename__ = 'users'\n    \n    # Primary key\n    id = db.Column(db.Integer, primary_key=True)\n    \n    # User credentials\n    username = db.Column(db.String(80), unique=True, nullable=False, index=True)\n    email = db.Column(db.String(120), unique=True, nullable=False, index=True)\n    password_hash = db.Column(db.String(255), nullable=False)\n    \n    # User profile\n    first_name = db.Column(db.String(50))\n    last_name = db.Column(db.String(50))\n    profile_picture = db.Column(db.String(255))\n    \n    # Timestamps\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    last_login = db.Column(db.DateTime)\n    \n    # Relationships\n    transactions = db.relationship('Transaction', backref='user', lazy='dynamic', cascade='all, delete-orphan')\n    budgets = db.relationship('Budget', backref='user', lazy='dynamic', cascade='all, delete-orphan')\n    goals = db.relationship('Goal', backref='user', lazy='dynamic', cascade='all, delete-orphan')\n    \n    def set_password(self, password):\n        \"\"\"Hash and set user password\"\"\"\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        \"\"\"Verify password against hash\"\"\"\n        return check_password_hash(self.password_hash, password)\n    \n    def __repr__(self):\n        return f'<User {self.username}>'\n\n\nclass Category(db.Model):\n    \"\"\"Expense/Income categories\"\"\"\n    __tablename__ = 'categories'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(50), unique=True, nullable=False)\n    type = db.Column(db.String(20), nullable=False)  # 'income' or 'expense'\n    icon = db.Column(db.String(50))\n    color = db.Column(db.String(20))\n    \n    # Relationships\n    transactions = db.relationship('Transaction', backref='category', lazy='dynamic')\n    budgets = db.relationship('Budget', backref='category', lazy='dynamic')\n    \n    def __repr__(self):\n        return f'<Category {self.name}>'\n\n\nclass Transaction(db.Model):\n    \"\"\"Financial transactions (income and expenses)\"\"\"\n    __tablename__ = 'transactions'\n    \n    # Primary key\n    id = db.Column(db.Integer, primary_key=True)\n    \n    # Foreign keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False, index=True)\n    category_id = db.Column(db.Integer, db.ForeignKey('categories.id'))\n    \n    # Transaction details\n    transaction_type = db.Column(db.String(20), nullable=False)  # 'income' or 'expense'\n    amount = db.Column(db.Float, nullable=False)\n    description = db.Column(db.String(255))\n    date = db.Column(db.Date, nullable=False, default=datetime.utcnow, index=True)\n    \n    # Payment method\n    payment_method = db.Column(db.String(50))  # 'cash', 'credit_card', 'debit_card', 'bank_transfer'\n    \n    # AI features\n    ai_categorized = db.Column(db.Boolean, default=False)\n    confidence_score = db.Column(db.Float)\n    \n    # Timestamps\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    def to_dict(self):\n        \"\"\"Convert transaction to dictionary\"\"\"\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'category_id': self.category_id,\n            'category_name': self.category.name if self.category else None,\n            'transaction_type': self.transaction_type,\n            'amount': self.amount,\n            'description': self.description,\n            'date': self.date.isoformat() if self.date else None,\n            'payment_method': self.payment_method,\n            'ai_categorized': self.ai_categorized,\n            'confidence_score': self.confidence_score,\n            'created_at': self.created_at.isoformat() if self.created_at else None\n        }\n    \n    def __repr__(self):\n        return f'<Transaction {self.id}: {self.transaction_type} ${self.amount}>'\n\n\nclass Budget(db.Model):\n    \"\"\"Budget tracking for different categories\"\"\"\n    __tablename__ = 'budgets'\n    \n    # Primary key\n    id = db.Column(db.Integer, primary_key=True)\n    \n    # Foreign keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False, index=True)\n    category_id = db.Column(db.Integer, db.ForeignKey('categories.id'), nullable=False)\n    \n    # Budget details\n    amount = db.Column(db.Float, nullable=False)\n    period = db.Column(db.String(20), nullable=False)  # 'weekly', 'monthly', 'yearly'\n    start_date = db.Column(db.Date, nullable=False)\n    end_date = db.Column(db.Date, nullable=False)\n    \n    # Status\n    is_active = db.Column(db.Boolean, default=True)\n    \n    # Timestamps\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    def get_spent_amount(self):\n        \"\"\"Calculate total spent in this budget category\"\"\"\n        total = db.session.query(db.func.sum(Transaction.amount)).filter(\n            Transaction.user_id == self.user_id,\n            Transaction.category_id == self.category_id,\n            Transaction.transaction_type == 'expense',\n            Transaction.date >= self.start_date,\n            Transaction.date <= self.end_date\n        ).scalar()\n        return total or 0.0\n    \n    def get_remaining_amount(self):\n        \"\"\"Calculate remaining budget\"\"\"\n        return self.amount - self.get_spent_amount()\n    \n    def get_percentage_used(self):\n        \"\"\"Calculate percentage of budget used\"\"\"\n        spent = self.get_spent_amount()\n        if self.amount > 0:\n            return (spent / self.amount) * 100\n        return 0\n    \n    def to_dict(self):\n        \"\"\"Convert budget to dictionary\"\"\"\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'category_id': self.category_id,\n            'category_name': self.category.name if self.category else None,\n            'amount': self.amount,\n            'spent': self.get_spent_amount(),\n            'remaining': self.get_remaining_amount(),\n            'percentage_used': self.get_percentage_used(),\n            'period': self.period,\n            'start_date': self.start_date.isoformat() if self.start_date else None,\n            'end_date': self.end_date.isoformat() if self.end_date else None,\n            'is_active': self.is_active\n        }\n    \n    def __repr__(self):\n        return f'<Budget {self.id}: {self.category.name if self.category else \"Unknown\"} ${self.amount}>'\n\n\nclass Goal(db.Model):\n    \"\"\"Savings goals for users\"\"\"\n    __tablename__ = 'goals'\n    \n    # Primary key\n    id = db.Column(db.Integer, primary_key=True)\n    \n    # Foreign keys\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False, index=True)\n    \n    # Goal details\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    target_amount = db.Column(db.Float, nullable=False)\n    current_amount = db.Column(db.Float, default=0.0)\n    deadline = db.Column(db.Date)\n    \n    # Status\n    is_completed = db.Column(db.Boolean, default=False)\n    completed_at = db.Column(db.DateTime)\n    \n    # Priority\n    priority = db.Column(db.String(20), default='medium')  # 'low', 'medium', 'high'\n    \n    # Timestamps\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    def get_progress_percentage(self):\n        \"\"\"Calculate goal progress percentage\"\"\"\n        if self.target_amount > 0:\n            return min((self.current_amount / self.target_amount) * 100, 100)\n        return 0\n    \n    def get_remaining_amount(self):\n        \"\"\"Calculate remaining amount to reach goal\"\"\"\n        return max(self.target_amount - self.current_amount, 0)\n    \n    def to_dict(self):\n        \"\"\"Convert goal to dictionary\"\"\"\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'name': self.name,\n            'description': self.description,\n            'target_amount': self.target_amount,\n            'current_amount': self.current_amount,\n            'remaining': self.get_remaining_amount(),\n            'progress_percentage': self.get_progress_percentage(),\n            'deadline': self.deadline.isoformat() if self.deadline else None,\n            'is_completed': self.is_completed,\n            'priority': self.priority,\n            'created_at': self.created_at.isoformat() if self.created_at else None\n        }\n    \n    def __repr__(self):\n        return f'<Goal {self.id}: {self.name} ${self.current_amount}/${self.target_amount}>'
