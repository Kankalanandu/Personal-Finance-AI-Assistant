"""\nPersonal Finance AI Assistant - Main Application\nAuthor: Kankala Nandu\nDescription: Flask-based web application for personal finance management with AI-powered insights\n"""\n\nimport os\nfrom datetime import datetime\nfrom flask import Flask, render_template, request, jsonify, redirect, url_for, flash, session\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager, login_user, logout_user, login_required, current_user\nfrom flask_cors import CORS\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\n# Initialize Flask application\napp = Flask(__name__)\napp.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'dev-secret-key-change-in-production')\napp.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'sqlite:///finance.db')\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\n# Initialize extensions\ndb = SQLAlchemy(app)\nCORS(app)\nlogin_manager = LoginManager(app)\nlogin_manager.login_view = 'login'\nlogin_manager.login_message = 'Please log in to access this page.'\n\n# Import models after db initialization\nfrom models import User, Transaction, Budget, Goal, Category\n\n# Import routes\nfrom routes import auth, transactions, budgets, analytics, ai_features\n\n# Register blueprints\napp.register_blueprint(auth.bp)\napp.register_blueprint(transactions.bp)\napp.register_blueprint(budgets.bp)\napp.register_blueprint(analytics.bp)\napp.register_blueprint(ai_features.bp)\n\n\n@login_manager.user_loader\ndef load_user(user_id):\n    \"\"\"Load user by ID for Flask-Login\"\"\"\n    return User.query.get(int(user_id))\n\n\n@app.route('/')\ndef index():\n    \"\"\"Home page - redirect to dashboard if logged in, else show landing page\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard'))\n    return render_template('index.html')\n\n\n@app.route('/dashboard')\n@login_required\ndef dashboard():\n    \"\"\"Main dashboard showing financial overview\"\"\"\n    try:\n        # Get user's recent transactions\n        recent_transactions = Transaction.query.filter_by(\n            user_id=current_user.id\n        ).order_by(Transaction.date.desc()).limit(10).all()\n        \n        # Get user's budgets\n        budgets = Budget.query.filter_by(user_id=current_user.id).all()\n        \n        # Get user's goals\n        goals = Goal.query.filter_by(user_id=current_user.id).all()\n        \n        # Calculate summary statistics\n        total_income = db.session.query(db.func.sum(Transaction.amount)).filter(\n            Transaction.user_id == current_user.id,\n            Transaction.transaction_type == 'income'\n        ).scalar() or 0\n        \n        total_expenses = db.session.query(db.func.sum(Transaction.amount)).filter(\n            Transaction.user_id == current_user.id,\n            Transaction.transaction_type == 'expense'\n        ).scalar() or 0\n        \n        balance = total_income - total_expenses\n        \n        return render_template('dashboard.html',\n                             transactions=recent_transactions,\n                             budgets=budgets,\n                             goals=goals,\n                             total_income=total_income,\n                             total_expenses=total_expenses,\n                             balance=balance)\n    except Exception as e:\n        app.logger.error(f'Dashboard error: {str(e)}')\n        flash('Error loading dashboard. Please try again.', 'error')\n        return render_template('dashboard.html', transactions=[], budgets=[], goals=[])\n\n\n@app.errorhandler(404)\ndef not_found_error(error):\n    \"\"\"Handle 404 errors\"\"\"\n    return render_template('errors/404.html'), 404\n\n\n@app.errorhandler(500)\ndef internal_error(error):\n    \"\"\"Handle 500 errors\"\"\"\n    db.session.rollback()\n    return render_template('errors/500.html'), 500\n\n\n@app.context_processor\ndef utility_processor():\n    \"\"\"Add utility functions to template context\"\"\"\n    def format_currency(amount):\n        \"\"\"Format number as currency\"\"\"\n        return f'${amount:,.2f}'\n    \n    def format_date(date):\n        \"\"\"Format date for display\"\"\"\n        if isinstance(date, str):\n            date = datetime.strptime(date, '%Y-%m-%d')\n        return date.strftime('%b %d, %Y')\n    \n    return dict(format_currency=format_currency, format_date=format_date)\n\n\nif __name__ == '__main__':\n    # Create database tables if they don't exist\n    with app.app_context():\n        db.create_all()\n        print('Database tables created successfully!')\n    \n    # Run the application\n    port = int(os.getenv('PORT', 5000))\n    debug = os.getenv('FLASK_ENV') == 'development'\n    \n    print(f'\\n{\"=\" * 50}')\n    print('ðŸ’° Personal Finance AI Assistant')\n    print(f'{\"=\" * 50}')\n    print(f'Server running on http://localhost:{port}')\n    print(f'Environment: {\"Development\" if debug else \"Production\"}')\n    print(f'{\"=\" * 50}\\n')\n    \n    app.run(host='0.0.0.0', port=port, debug=debug)
